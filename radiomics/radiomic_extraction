import os
from radiomics import featureextractor
from sklearn.linear_model import LogisticRegression
import json

########## NOTICE ############
#   A new conda environment has been made to accommodate pyradiomics' need for python 3.7.12. Remember to use this interpreter in VS CODE
#   GBM_RadiomicAnalysis
#
#   LR has installed pyradiomics in main environment GBM_newgroup. Is it stable?
##############################

# If selected_patients is empty, the whole datapath directory is scanned for patients.
# selected_patients = ["0114"]
# patient_numbers = selected_patients if selected_patients else os.listdir(datapath)
with open("D:\\GBM\output_test\\radiomic_results\\available_patients.json", "r") as f:
    patient_numbers = json.load(f)

extractor = featureextractor.RadiomicsFeatureExtractor("radiomics\Params.yaml")

def extract_features(image_path, mask_path):
    result = extractor.execute(image_path, mask_path)

    # Grab useful metrics
    features = {}
    for key, value in result.items():
        if not key.startswith("diagnostics"): # Do not include diagnostic info - See also radiomics/Params.yaml for extracted features
            features[key] = float(value) # Value is originally ndarray - can't be serialized to json
    
    return features


# PATHS 
# datapath:  "D:\\GBM\\nii_prepared\\AUH"
# new_masks: "D:\\GBM\output_test\\radiomic_results\\new_masks"

# RUN EXTRACTION FOR PATIENTS #
all_patient_features = {}
for patient_number in patient_numbers: 
    mask_path = f"D:\\GBM\output_test\\radiomic_results\\masks\\masks_largest_lesion\\{patient_number}"
    try:
        mask_filename = os.listdir(mask_path)[0]
    except FileNotFoundError:
        print("No such folder. Skipping patient.")
        continue

    date = mask_filename.split("_")[1]
    mask_path = os.path.join(mask_path, mask_filename)
    
    image_path = f"D:\\GBM\\nii_prepared\\AUH\\{patient_number}\\{patient_number}_{date}_MR.nii.gz"

    print("Calculating features for:", patient_number)
    try:
        all_patient_features[patient_number] = extract_features(image_path, mask_path)
    except Exception as e:
        print("Error happened while extracting features, skipping patient!\n", e)

# PRINTING - OPTIONAL #
do_print = True
if do_print:
    for patient_no, features in all_patient_features.items():
        print("-" * 10, "PATIENT:", patient_no, "-" * 10)
        for key,value in features.items():
            print((key + " ").ljust(40, "-"), ":", value)
        print("")

# SAVE #
with open("D:\\GBM\output_test\\radiomic_results\\feature_output\\patient_all_features.json", "w") as f:
    json.dump(all_patient_features, f)